{"ast":null,"code":"// src/ai.js\n\nimport { Configuration, OpenAIApi } from 'openai';\n\n// Configure the OpenAI client using the environment variable.\n// Make sure you have a .env.local in your project root with:\n//   REACT_APP_OPENAI_API_KEY=sk-XXXXXXXXXXXXXXXXXXXXXXXX\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\nexport const openai = new OpenAIApi(configuration);\n\n/**\n * Given a FEN string (position before move 3), the user's third move,\n * and the correct third move, this function asks OpenAI to explain in \n * 2–3 sentences why the user's move is inferior.\n *\n * @param {string} fen         — the FEN of the position before move 3\n * @param {string} userMove    — the user's third move (e.g. \"b1c3\")\n * @param {string} correctMove — the correct third move (e.g. \"g1f3\")\n * @returns {Promise<string>}   — a concise “why that move is bad” explanation\n */\nexport async function getIncorrectMoveExplanation(fen, userMove, correctMove) {\n  // Construct a clear prompt for the model\n  const prompt = `\nYou are a strong chess coach. Here is the position (in FEN):\n${fen}\n\nIt is White’s move (or Black’s move, based on FEN). The student played \"${userMove}\" as their third move, but the best move was \"${correctMove}\". \n\nPlease explain in 2–3 clear sentences why \"${userMove}\" is a poor choice compared to \"${correctMove}\". Mention any tactical or strategic reasons (e.g., material loss, hanging a piece, weakened squares, loss of tempo). Be concise.\n`.trim();\n  try {\n    // Call OpenAI’s Chat Completion endpoint\n    const response = await openai.createChatCompletion({\n      model: 'gpt-4o-mini',\n      // or 'gpt-3.5-turbo' if you don’t have GPT-4\n      messages: [{\n        role: 'system',\n        content: 'You are a helpful chess coach.'\n      }, {\n        role: 'user',\n        content: prompt\n      }],\n      temperature: 0.7,\n      max_tokens: 200\n    });\n\n    // Extract and return the explanation text\n    return response.data.choices[0].message.content.trim();\n  } catch (error) {\n    console.error('Error fetching explanation from OpenAI:', error);\n    // Fallback message if the API call fails\n    return 'That move is suboptimal. Try to avoid losing material or weakening your position.';\n  }\n}","map":{"version":3,"names":["Configuration","OpenAIApi","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","getIncorrectMoveExplanation","fen","userMove","correctMove","prompt","trim","response","createChatCompletion","model","messages","role","content","temperature","max_tokens","data","choices","message","error","console"],"sources":["/Users/ahmedtaha/Visualize3/chess-visualization-app/src/ai.js"],"sourcesContent":["// src/ai.js\n\nimport { Configuration, OpenAIApi } from 'openai';\n\n// Configure the OpenAI client using the environment variable.\n// Make sure you have a .env.local in your project root with:\n//   REACT_APP_OPENAI_API_KEY=sk-XXXXXXXXXXXXXXXXXXXXXXXX\nconst configuration = new Configuration({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n});\nexport const openai = new OpenAIApi(configuration);\n\n/**\n * Given a FEN string (position before move 3), the user's third move,\n * and the correct third move, this function asks OpenAI to explain in \n * 2–3 sentences why the user's move is inferior.\n *\n * @param {string} fen         — the FEN of the position before move 3\n * @param {string} userMove    — the user's third move (e.g. \"b1c3\")\n * @param {string} correctMove — the correct third move (e.g. \"g1f3\")\n * @returns {Promise<string>}   — a concise “why that move is bad” explanation\n */\nexport async function getIncorrectMoveExplanation(fen, userMove, correctMove) {\n  // Construct a clear prompt for the model\n  const prompt = `\nYou are a strong chess coach. Here is the position (in FEN):\n${fen}\n\nIt is White’s move (or Black’s move, based on FEN). The student played \"${userMove}\" as their third move, but the best move was \"${correctMove}\". \n\nPlease explain in 2–3 clear sentences why \"${userMove}\" is a poor choice compared to \"${correctMove}\". Mention any tactical or strategic reasons (e.g., material loss, hanging a piece, weakened squares, loss of tempo). Be concise.\n`.trim();\n\n  try {\n    // Call OpenAI’s Chat Completion endpoint\n    const response = await openai.createChatCompletion({\n      model: 'gpt-4o-mini', // or 'gpt-3.5-turbo' if you don’t have GPT-4\n      messages: [\n        { role: 'system', content: 'You are a helpful chess coach.' },\n        { role: 'user', content: prompt },\n      ],\n      temperature: 0.7,\n      max_tokens: 200,\n    });\n\n    // Extract and return the explanation text\n    return response.data.choices[0].message.content.trim();\n  } catch (error) {\n    console.error('Error fetching explanation from OpenAI:', error);\n    // Fallback message if the API call fails\n    return 'That move is suboptimal. Try to avoid losing material or weakening your position.';\n  }\n}\n"],"mappings":"AAAA;;AAEA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;;AAEjD;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAIF,aAAa,CAAC;EACtCG,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AACF,OAAO,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAACC,aAAa,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeM,2BAA2BA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EAC5E;EACA,MAAMC,MAAM,GAAG;AACjB;AACA,EAAEH,GAAG;AACL;AACA,0EAA0EC,QAAQ,iDAAiDC,WAAW;AAC9I;AACA,6CAA6CD,QAAQ,mCAAmCC,WAAW;AACnG,CAAC,CAACE,IAAI,CAAC,CAAC;EAEN,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMP,MAAM,CAACQ,oBAAoB,CAAC;MACjDC,KAAK,EAAE,aAAa;MAAE;MACtBC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAiC,CAAC,EAC7D;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEP;MAAO,CAAC,CAClC;MACDQ,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,OAAOP,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO,CAACN,IAAI,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D;IACA,OAAO,mFAAmF;EAC5F;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}