// src/StockfishTest.jsx - Vercel-compatible version

import React, { useState } from 'react';

const StockfishTest = () => {
  const [status, setStatus] = useState('Ready to test');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPuzzle, setGeneratedPuzzle] = useState(null);
  const [error, setError] = useState(null);
  const [testMode, setTestMode] = useState('api'); // 'api' or 'client'

  // Test API-based puzzle generation
  const testAPIGeneration = async () => {
    try {
      setIsGenerating(true);
      setError(null);
      setStatus('üéØ Generating puzzle via API...');
      
      const response = await fetch('/api/generate-puzzle', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          difficulty: 'intermediate',
          userRating: 1500
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const puzzle = await response.json();
      setGeneratedPuzzle(puzzle);
      setStatus('‚úÖ API puzzle generated successfully!');
      
    } catch (err) {
      setError(`API generation failed: ${err.message}`);
      setStatus('‚ùå API generation failed');
    } finally {
      setIsGenerating(false);
    }
  };

  // Test client-side Stockfish (if possible)
  const testClientGeneration = async () => {
    try {
      setIsGenerating(true);
      setError(null);
      setStatus('üêü Testing client-side Stockfish...');
      
      // Try to load Stockfish from CDN
      const worker = new Worker('https://cdn.jsdelivr.net/npm/stockfish@15.0.0/src/stockfish.js');
      
      let resolved = false;
      
      const timeout = setTimeout(() => {
        if (!resolved) {
          worker.terminate();
          setError('Stockfish loading timeout');
          setStatus('‚ùå Client-side failed');
          setIsGenerating(false);
        }
      }, 10000);

      worker.onmessage = function(e) {
        console.log('Stockfish:', e.data);
        
        if (e.data === 'uciok' && !resolved) {
          resolved = true;
          clearTimeout(timeout);
          
          // Generate a simple test puzzle
          const testPuzzle = {
            id: `client_test_${Date.now()}`,
            fen: 'r1bqkb1r/pppp1ppp/2n2n2/4p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4',
            moves: ['f3e5', 'd8h4', 'e5f7', 'e8f7'],
            explanation: 'Knight fork generated by client-side Stockfish test.',
            difficulty: 'intermediate',
            rating: 1500,
            themes: ['fork'],
            source: 'client-stockfish'
          };
          
          setGeneratedPuzzle(testPuzzle);
          setStatus('‚úÖ Client-side Stockfish working!');
          setIsGenerating(false);
          worker.terminate();
        }
      };

      worker.onerror = function(error) {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          setError(`Stockfish worker error: ${error.message}`);
          setStatus('‚ùå Client-side failed');
          setIsGenerating(false);
        }
      };

      // Initialize Stockfish
      worker.postMessage('uci');
      
    } catch (err) {
      setError(`Client generation failed: ${err.message}`);
      setStatus('‚ùå Client-side failed');
      setIsGenerating(false);
    }
  };

  const buttonStyle = {
    margin: '10px',
    padding: '10px 20px',
    fontSize: '14px',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#4CAF50',
    color: 'white',
    cursor: 'pointer'
  };

  const disabledButtonStyle = {
    ...buttonStyle,
    backgroundColor: '#ccc',
    cursor: 'not-allowed'
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h2>Stockfish Integration Test (Vercel Compatible)</h2>
      
      <div style={{ marginBottom: '20px' }}>
        <h3>Status: {status}</h3>
        {error && (
          <div style={{ 
            color: 'red', 
            backgroundColor: '#ffe6e6', 
            padding: '10px', 
            borderRadius: '5px',
            marginTop: '10px'
          }}>
            Error: {error}
          </div>
        )}
      </div>

      <div style={{ marginBottom: '20px' }}>
        <h4>Test Methods:</h4>
        
        <button 
          style={isGenerating ? disabledButtonStyle : buttonStyle}
          onClick={testAPIGeneration}
          disabled={isGenerating}
        >
          {isGenerating && testMode === 'api' ? 'Testing API...' : 'Test API Generation'}
        </button>
        
        <button 
          style={isGenerating ? disabledButtonStyle : buttonStyle}
          onClick={testClientGeneration}
          disabled={isGenerating}
        >
          {isGenerating && testMode === 'client' ? 'Testing Client...' : 'Test Client-Side Stockfish'}
        </button>
      </div>

      {generatedPuzzle && (
        <div style={{ 
          backgroundColor: '#f0f0f0', 
          padding: '20px', 
          borderRadius: '5px',
          marginTop: '20px'
        }}>
          <h3>Generated Puzzle:</h3>
          <div style={{ fontFamily: 'monospace', fontSize: '12px' }}>
            <p><strong>ID:</strong> {generatedPuzzle.id}</p>
            <p><strong>Starting FEN:</strong> {generatedPuzzle.fen}</p>
            <p><strong>Moves:</strong> {generatedPuzzle.moves.join(', ')}</p>
            <p><strong>Move Count:</strong> {generatedPuzzle.moves.length}</p>
            <p><strong>Difficulty:</strong> {generatedPuzzle.difficulty}</p>
            <p><strong>Rating:</strong> {generatedPuzzle.rating}</p>
            <p><strong>Themes:</strong> {generatedPuzzle.themes.join(', ')}</p>
            <p><strong>Explanation:</strong> {generatedPuzzle.explanation}</p>
            <p><strong>Source:</strong> {generatedPuzzle.source}</p>
          </div>
        </div>
      )}

      <div style={{ 
        marginTop: '30px', 
        padding: '15px', 
        backgroundColor: '#e8f4f8', 
        borderRadius: '5px' 
      }}>
        <h4>Vercel Deployment Notes:</h4>
        <ul>
          <li><strong>API Method:</strong> Server-side generation using curated puzzles</li>
          <li><strong>Client Method:</strong> Browser-based Stockfish (may have limitations)</li>
          <li><strong>Recommended:</strong> Start with API method for reliable deployment</li>
          <li><strong>Headers:</strong> COOP/COEP headers configured for Stockfish WebAssembly</li>
          <li><strong>CDN:</strong> Using jsDelivr CDN for Stockfish.js</li>
        </ul>
      </div>

      <div style={{ 
        marginTop: '20px', 
        padding: '15px', 
        backgroundColor: '#fff3cd', 
        borderRadius: '5px' 
      }}>
        <h4>Next Steps:</h4>
        <ol>
          <li>Test API generation first (should always work)</li>
          <li>Test client-side Stockfish (may fail due to WASM restrictions)</li>
          <li>Check browser console for detailed logs</li>
          <li>If client-side fails, we'll use the API approach</li>
        </ol>
      </div>
    </div>
  );
};

export default StockfishTest;
